### ✅ 1. 프로젝트 개요

**목적:**

- 실시간 시장 조건에 따라 자동으로 매수·매도 전략을 실행하는 시스템
- 한국투자증권 API 기반으로 미국 주식 매매 자동화
- 조건: 상승 필터(NVDA 외), 하락률 기반 매수, 수익률 기반 매도
- 안정성과 실전 대응력 확보가 목표

**운영 시간:**

- 매일 11:30 ~ 17:00 (미국장 기준)

---

### ✅ 2. 시스템 구성

| 모듈 | 설명 |
| --- | --- |
| 스케줄러 | 11:30~17:00 범위 내에서 매도는 30분 단위, 매수는 1시간 단위로 루프 실행 |
| API 연동 | 한국투자증권 OpenAPI 사용: 시세 조회, 잔고 조회, 주문 실행 |
| 매도 로직 | 수익률 ≥ 5% 종목 즉시 매도 / 그 외 수익률 가장 높은 종목 매도 |
| 매수 로직 | 전일 종가 대비 가장 하락한 종목 3개 선정 후 매수 |
| 상승 조건 필터 | NVDA, AMZN, MSFT 중 3종 모두 전일 종가 대비 상승 시 매수 허용 |
| 주문 수량 계산 | 예수금 실시간 기준으로 1/3씩 할당하여 최대 수량 계산 |
| 미체결 주문 처리 | 매수 주문 후 20분 이내 체결 안 되면 자동 취소 |
| 상태 저장 | 종목별 직전 매도 체결가 저장 → 매수 시 가격 비교에 사용 |

---

### ✅ 3. 주요 조건 및 규칙

### 📌 매수 조건

- 장중 1시간 단위 체크
- 상승 필터 통과 시만 실행 (NVDA, AMZN, MSFT)
- 전일 종가 대비 가장 많이 하락한 종목 3개
- 예수금 기준으로 1/3씩 분배하여 매수
- 매수하려는 현재가가 직전 매도가보다 낮으면 매수하지 않음

### 📌 매도 조건

- 장중 30분 단위 체크
- 수익률 ≥ 5% 종목 즉시 매도
- 그 외 수익률 가장 높은 종목 매도
- 매도 시 현재가 ≥ 직전 매수가일 경우에만 매도 실행

### 📌 주문 관련 정책

- 매수 주문 후 20분 내 체결 안 되면 자동 취소
- 17:00 이후 신규 주문 금지, 기존 미체결은 유지
- 모든 주문은 지정가 기준으로 진행 (추후 시장가/슬리피지 설정 가능)

---

### ✅ 4. 예외 케이스 및 처리 방식

| 케이스 | 처리 방식 |
| --- | --- |
| API 연결 끊김 | 재연결 시도 3회, 실패 시 로그 후 중단 |
| 예수금 부족 | 해당 종목 매수 스킵하고 다음 종목으로 진행 |
| 현재가 API 오류 | 종목 단위로 스킵 처리 후 다음 루프 대기 |
| 잔고에 동일 종목 존재 | 중복 매수 허용, 단 매도 시 누적 수익률 기준 적용 |
| 매도 수익률 5% 미만이면서도 수익률 최대 종목이 손실인 경우 | 매도 스킵 |
| 미체결 주문 다수 존재 | 20분 이상된 주문만 체크 후 개별 취소 |
| 장중 외 시간에 스크립트 실행 시 | 바로 중단, “시간 외 실행 금지” 로그 출력 |

---

### ✅ 5. 테스트 시나리오 (CheckList)

| 테스트 항목 | 방법 | 기대 결과 |
| --- | --- | --- |
| API 연동 성공 여부 | 로그인 후 잔고 및 시세 조회 | 정상 조회됨 |
| 전일 대비 하락률 계산 | 3종목 수동 입력 → 시세 비교 | 올바른 종목 3개 추출됨 |
| NVDA 상승 판단 | 전일 종가: 300, 현재가: 305 입력 | 상승 판단 true |
| 매수 조건 통과 → 주문 발생 | 종목 조건 만족 상태에서 루프 실행 | 주문 실행 로그 확인 |
| 직전 매도가 비교 | 직전 매도가 100, 현재가 95 | 매수 실행 안 됨 |
| 예수금 부족 처리 | 예수금 10달러로 500달러 종목 매수 시도 | 매수 건 스킵 |
| 매도 수익률 계산 | 매수가 100, 현재가 107 | 수익률 7% 계산 → 매도 실행 |
| 미체결 주문 취소 | 주문 체결 안 된 상태로 20분 경과 | 자동으로 주문 취소됨 |
| 루프 실행 제한 | 오전 10:00 또는 오후 17:30 실행 시 | “시간 외 실행”으로 중단됨 |

---

### ✅ 6. 납품 범위

- `.py` 스크립트 1개 또는 2개 파일 구조 (main + config 모듈 가능)
- `README.txt` 또는 `.md`에 실행 방법, 전략 수정법 문서 포함
- 단순 전략 수정 1회 무료 지원 포함 (조건 숫자 변경 등)

---

### ✅ 7. 확장 고려사항 (2차 계약 시)

| 항목 | 확장 방식 |
| --- | --- |
| 텔레그램 알림 | 매수/매도 로그 푸시 |
| 전략 설정 파일 분리 | .env 또는 .json 기반 전략 입력 구조 |
| GUI 대시보드 | PyQt 또는 Tkinter |
| CSV 또는 DB 기록 | 체결 이력 저장용 |
| 다계좌 / 멀티전략 확장 | 종목-전략 매핑 구조 설계 필요 |

### ✅ 1. 프로젝트 개요

**목적:**

- PJT #1 전략에 기반한 자동매매 시스템 구축
- 실시간 조건 판단 + 한국투자증권 API를 통한 실거래 자동화
- 향후 PJT #2 전략 확장 및 사용자가 종목을 직접 관리할 수 있도록 구조화

---

### ✅ 2. 전체 시스템 구성

```
arduino
복사편집
┌────────────────────────────┐
│        Main Scheduler       │
│ (30분: 매도 / 1시간: 매수) │
└────────────┬───────────────┘
             ↓
   ┌───────────────────────┐
   │    전략 판단 모듈 (PJT #1) │
   └───────────────────────┘
             ↓
   ┌───────────────────────┐
   │    주문 실행 / 잔고 관리     │
   └───────────────────────┘
             ↓
   ┌───────────────────────┐
   │   로그 / 체결 결과 저장     │
   └───────────────────────┘

```

---

### ✅ 3. PJT #1 전략 상세

### 📌 매도 전략 (30분 주기)

- 보유 종목 중 **수익률 ≥ 5% → 즉시 매도**
- 그 외 종목 중 **수익률 가장 높은 종목 1개 매도**
- 단, 현재가 ≥ 매수가일 때만 매도

### 📌 매수 전략 (1시간 주기)

- watch_list 중 **전일 대비 가장 많이 하락한 종목 3개 선정**
- 매수 시 **엔비디아, 아마존, 마이크로소프트가 전일 대비 상승 중**일 경우에만 실행
- 실시간 예수금을 1/3씩 분할하여 최대 수량 계산 후 매수
- 매수 가격이 직전 매도 가격보다 낮으면 매수하지 않음

### 📌 미체결 처리

- 매수 주문 후 20분 내 미체결 시 자동 취소
- 이후 루프에서 다시 재시도

---

### ✅ 4. watch_list 외부화 설계

| 항목 | 내용 |
| --- | --- |
| 파일 형식 | `watch_list.txt` (또는 `config.json`) |
| 사용자 입력 예시 (txt) | 각 줄에 1종목씩: `NVDA`, `AMZN`, `TSLA`, ... |
| 적용 방식 | 실행 시 해당 파일에서 리스트를 불러와 실시간 적용 |
| 장점 | 종목 추가/삭제 시 코드 수정 없이 사용자가 직접 수정 가능 |

```python
python
복사편집
def load_watch_list(path="watch_list.txt"):
    with open(path) as f:
        return [line.strip() for line in f if line.strip()]

```

→ **코드 수정 없이 watch_list 유지보수 가능 + 확장성 확보**

---

### ✅ 5. PJT #2 확장 고려 구조

> PJT #2는 추후 다음과 같이 확장 가능하도록 설계:
> 
- 전략 모듈 분리 → `strategy_pjt1.py`, `strategy_pjt2.py`
- 고가/저가 중간값 기반 상위 25%/하위 25% 구간 진입 판단 로직
- 중간값 판단 및 현재가 위치 비교 모듈 추가
- 공통 주문 시스템을 그대로 활용 가능

```python
python
복사편집
if strategy_mode == "pjt1":
    execute_pjt1_strategy()
elif strategy_mode == "pjt2":
    execute_pjt2_strategy()

```

---

### ✅ 6. 테스트 항목 (PJT #1 기준)

| 항목 | 방법 | 기대 결과 |
| --- | --- | --- |
| watch_list 파일 수정 | `NVDA` → `AMD`로 변경 후 실행 | 새로운 종목으로 전략 반영 |
| NVDA 상승 여부 판단 | 전일 종가: 300 / 현재가: 305 | 상승으로 인식됨 |
| 직전 매도 가격 조건 | 직전 매도: 100 / 현재가: 95 | 매수하지 않음 |
| 미체결 주문 테스트 | 주문 후 체결 없이 20분 경과 | 자동 취소됨 |
| 루프 시간 외 실행 | 오전 10시 or 17:30 실행 | "시간 외 실행 중단" 메시지 출력 |

---

### ✅ 7. 납품 범위

- `main.py`: 메인 실행 스크립트 (스케줄 포함)
- `strategy_pjt1.py`: PJT #1 전략 모듈
- `order_manager.py`: 주문 실행 및 API 연동
- `watch_list.txt`: 사용자 종목 설정 파일
- `README.md`: 사용법, 수정 방법 문서화